//leetcode solution
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i = 0; i<n; i++){
            nums1[m] = nums2[i];
            m++; 
        }
        sort(nums1.begin() , nums1.end());
        
    }
};


// gfg solution - 2 pointer approach
class Solution {
  public:
    void mergeArrays(vector<int>& a, vector<int>& b) {
        // diff from leetcode solution here we dont have extra space in a array lets solve using 2 pointer
        int left = a.size()-1;
        int right = 0;
        
        while(left>=0 && right<b.size()){
            if(a[left] > b[right]){
                swap(a[left] , b[right]);
                left--;
                right++;
            }else{
                break;
            }
        }
        sort(a.begin() , a.end());
        sort(b.begin() , b.end());
        
        
    }
};